// Code generated by go-swagger; DO NOT EDIT.

package merchants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new merchants API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new merchants API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new merchants API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for merchants API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1Merchant(params *GetV1MerchantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1MerchantOK, error)

	GetV1MerchantMerchantRef(params *GetV1MerchantMerchantRefParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1MerchantMerchantRefOK, error)

	PostV1Merchant(params *PostV1MerchantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1MerchantCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetV1Merchant lists merchants

Retrieves a paginated list of merchants with optional search and filtering
*/
func (a *Client) GetV1Merchant(params *GetV1MerchantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1MerchantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1MerchantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Merchant",
		Method:             "GET",
		PathPattern:        "/v1/merchant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1MerchantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1MerchantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Merchant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1MerchantMerchantRef gets merchant details

Retrieves detailed information about a specific merchant including balance and QR NMID details
*/
func (a *Client) GetV1MerchantMerchantRef(params *GetV1MerchantMerchantRefParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1MerchantMerchantRefOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1MerchantMerchantRefParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1MerchantMerchantRef",
		Method:             "GET",
		PathPattern:        "/v1/merchant/{merchant_ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1MerchantMerchantRefReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1MerchantMerchantRefOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1MerchantMerchantRef: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Merchant creates a new merchant

Creates a new merchant with the provided information and initializes their balance and QR NMID
*/
func (a *Client) PostV1Merchant(params *PostV1MerchantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1MerchantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1MerchantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Merchant",
		Method:             "POST",
		PathPattern:        "/v1/merchant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1MerchantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1MerchantCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Merchant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
