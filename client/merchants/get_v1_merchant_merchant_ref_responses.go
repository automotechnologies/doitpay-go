// Code generated by go-swagger; DO NOT EDIT.

package merchants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/automotechnologies/doitpay-go/v2/models"
)

// GetV1MerchantMerchantRefReader is a Reader for the GetV1MerchantMerchantRef structure.
type GetV1MerchantMerchantRefReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetV1MerchantMerchantRefReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetV1MerchantMerchantRefOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetV1MerchantMerchantRefBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetV1MerchantMerchantRefUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetV1MerchantMerchantRefNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetV1MerchantMerchantRefInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/merchant/{merchant_ref}] GetV1MerchantMerchantRef", response, response.Code())
	}
}

// NewGetV1MerchantMerchantRefOK creates a GetV1MerchantMerchantRefOK with default headers values
func NewGetV1MerchantMerchantRefOK() *GetV1MerchantMerchantRefOK {
	return &GetV1MerchantMerchantRefOK{}
}

/*
GetV1MerchantMerchantRefOK describes a response with status code 200, with default header values.

OK
*/
type GetV1MerchantMerchantRefOK struct {
	Payload *models.MerchantResponse
}

// IsSuccess returns true when this get v1 merchant merchant ref o k response has a 2xx status code
func (o *GetV1MerchantMerchantRefOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v1 merchant merchant ref o k response has a 3xx status code
func (o *GetV1MerchantMerchantRefOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 merchant merchant ref o k response has a 4xx status code
func (o *GetV1MerchantMerchantRefOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 merchant merchant ref o k response has a 5xx status code
func (o *GetV1MerchantMerchantRefOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 merchant merchant ref o k response a status code equal to that given
func (o *GetV1MerchantMerchantRefOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v1 merchant merchant ref o k response
func (o *GetV1MerchantMerchantRefOK) Code() int {
	return 200
}

func (o *GetV1MerchantMerchantRefOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/merchant/{merchant_ref}][%d] getV1MerchantMerchantRefOK %s", 200, payload)
}

func (o *GetV1MerchantMerchantRefOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/merchant/{merchant_ref}][%d] getV1MerchantMerchantRefOK %s", 200, payload)
}

func (o *GetV1MerchantMerchantRefOK) GetPayload() *models.MerchantResponse {
	return o.Payload
}

func (o *GetV1MerchantMerchantRefOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MerchantResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1MerchantMerchantRefBadRequest creates a GetV1MerchantMerchantRefBadRequest with default headers values
func NewGetV1MerchantMerchantRefBadRequest() *GetV1MerchantMerchantRefBadRequest {
	return &GetV1MerchantMerchantRefBadRequest{}
}

/*
GetV1MerchantMerchantRefBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type GetV1MerchantMerchantRefBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this get v1 merchant merchant ref bad request response has a 2xx status code
func (o *GetV1MerchantMerchantRefBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 merchant merchant ref bad request response has a 3xx status code
func (o *GetV1MerchantMerchantRefBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 merchant merchant ref bad request response has a 4xx status code
func (o *GetV1MerchantMerchantRefBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 merchant merchant ref bad request response has a 5xx status code
func (o *GetV1MerchantMerchantRefBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 merchant merchant ref bad request response a status code equal to that given
func (o *GetV1MerchantMerchantRefBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v1 merchant merchant ref bad request response
func (o *GetV1MerchantMerchantRefBadRequest) Code() int {
	return 400
}

func (o *GetV1MerchantMerchantRefBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/merchant/{merchant_ref}][%d] getV1MerchantMerchantRefBadRequest %s", 400, payload)
}

func (o *GetV1MerchantMerchantRefBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/merchant/{merchant_ref}][%d] getV1MerchantMerchantRefBadRequest %s", 400, payload)
}

func (o *GetV1MerchantMerchantRefBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetV1MerchantMerchantRefBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1MerchantMerchantRefUnauthorized creates a GetV1MerchantMerchantRefUnauthorized with default headers values
func NewGetV1MerchantMerchantRefUnauthorized() *GetV1MerchantMerchantRefUnauthorized {
	return &GetV1MerchantMerchantRefUnauthorized{}
}

/*
GetV1MerchantMerchantRefUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetV1MerchantMerchantRefUnauthorized struct {
	Payload map[string]string
}

// IsSuccess returns true when this get v1 merchant merchant ref unauthorized response has a 2xx status code
func (o *GetV1MerchantMerchantRefUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 merchant merchant ref unauthorized response has a 3xx status code
func (o *GetV1MerchantMerchantRefUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 merchant merchant ref unauthorized response has a 4xx status code
func (o *GetV1MerchantMerchantRefUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 merchant merchant ref unauthorized response has a 5xx status code
func (o *GetV1MerchantMerchantRefUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 merchant merchant ref unauthorized response a status code equal to that given
func (o *GetV1MerchantMerchantRefUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get v1 merchant merchant ref unauthorized response
func (o *GetV1MerchantMerchantRefUnauthorized) Code() int {
	return 401
}

func (o *GetV1MerchantMerchantRefUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/merchant/{merchant_ref}][%d] getV1MerchantMerchantRefUnauthorized %s", 401, payload)
}

func (o *GetV1MerchantMerchantRefUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/merchant/{merchant_ref}][%d] getV1MerchantMerchantRefUnauthorized %s", 401, payload)
}

func (o *GetV1MerchantMerchantRefUnauthorized) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetV1MerchantMerchantRefUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1MerchantMerchantRefNotFound creates a GetV1MerchantMerchantRefNotFound with default headers values
func NewGetV1MerchantMerchantRefNotFound() *GetV1MerchantMerchantRefNotFound {
	return &GetV1MerchantMerchantRefNotFound{}
}

/*
GetV1MerchantMerchantRefNotFound describes a response with status code 404, with default header values.

Merchant not found
*/
type GetV1MerchantMerchantRefNotFound struct {
	Payload map[string]string
}

// IsSuccess returns true when this get v1 merchant merchant ref not found response has a 2xx status code
func (o *GetV1MerchantMerchantRefNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 merchant merchant ref not found response has a 3xx status code
func (o *GetV1MerchantMerchantRefNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 merchant merchant ref not found response has a 4xx status code
func (o *GetV1MerchantMerchantRefNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v1 merchant merchant ref not found response has a 5xx status code
func (o *GetV1MerchantMerchantRefNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get v1 merchant merchant ref not found response a status code equal to that given
func (o *GetV1MerchantMerchantRefNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get v1 merchant merchant ref not found response
func (o *GetV1MerchantMerchantRefNotFound) Code() int {
	return 404
}

func (o *GetV1MerchantMerchantRefNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/merchant/{merchant_ref}][%d] getV1MerchantMerchantRefNotFound %s", 404, payload)
}

func (o *GetV1MerchantMerchantRefNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/merchant/{merchant_ref}][%d] getV1MerchantMerchantRefNotFound %s", 404, payload)
}

func (o *GetV1MerchantMerchantRefNotFound) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetV1MerchantMerchantRefNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetV1MerchantMerchantRefInternalServerError creates a GetV1MerchantMerchantRefInternalServerError with default headers values
func NewGetV1MerchantMerchantRefInternalServerError() *GetV1MerchantMerchantRefInternalServerError {
	return &GetV1MerchantMerchantRefInternalServerError{}
}

/*
GetV1MerchantMerchantRefInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetV1MerchantMerchantRefInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this get v1 merchant merchant ref internal server error response has a 2xx status code
func (o *GetV1MerchantMerchantRefInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v1 merchant merchant ref internal server error response has a 3xx status code
func (o *GetV1MerchantMerchantRefInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v1 merchant merchant ref internal server error response has a 4xx status code
func (o *GetV1MerchantMerchantRefInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v1 merchant merchant ref internal server error response has a 5xx status code
func (o *GetV1MerchantMerchantRefInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get v1 merchant merchant ref internal server error response a status code equal to that given
func (o *GetV1MerchantMerchantRefInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get v1 merchant merchant ref internal server error response
func (o *GetV1MerchantMerchantRefInternalServerError) Code() int {
	return 500
}

func (o *GetV1MerchantMerchantRefInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/merchant/{merchant_ref}][%d] getV1MerchantMerchantRefInternalServerError %s", 500, payload)
}

func (o *GetV1MerchantMerchantRefInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/merchant/{merchant_ref}][%d] getV1MerchantMerchantRefInternalServerError %s", 500, payload)
}

func (o *GetV1MerchantMerchantRefInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *GetV1MerchantMerchantRefInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
