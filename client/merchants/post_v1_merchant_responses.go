// Code generated by go-swagger; DO NOT EDIT.

package merchants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/automotechnologies/doitpay-go/v2/models"
)

// PostV1MerchantReader is a Reader for the PostV1Merchant structure.
type PostV1MerchantReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1MerchantReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostV1MerchantCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1MerchantBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostV1MerchantUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1MerchantInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/merchant] PostV1Merchant", response, response.Code())
	}
}

// NewPostV1MerchantCreated creates a PostV1MerchantCreated with default headers values
func NewPostV1MerchantCreated() *PostV1MerchantCreated {
	return &PostV1MerchantCreated{}
}

/*
PostV1MerchantCreated describes a response with status code 201, with default header values.

Created
*/
type PostV1MerchantCreated struct {
	Payload *models.MerchantResponse
}

// IsSuccess returns true when this post v1 merchant created response has a 2xx status code
func (o *PostV1MerchantCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 merchant created response has a 3xx status code
func (o *PostV1MerchantCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 merchant created response has a 4xx status code
func (o *PostV1MerchantCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 merchant created response has a 5xx status code
func (o *PostV1MerchantCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 merchant created response a status code equal to that given
func (o *PostV1MerchantCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post v1 merchant created response
func (o *PostV1MerchantCreated) Code() int {
	return 201
}

func (o *PostV1MerchantCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/merchant][%d] postV1MerchantCreated %s", 201, payload)
}

func (o *PostV1MerchantCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/merchant][%d] postV1MerchantCreated %s", 201, payload)
}

func (o *PostV1MerchantCreated) GetPayload() *models.MerchantResponse {
	return o.Payload
}

func (o *PostV1MerchantCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MerchantResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1MerchantBadRequest creates a PostV1MerchantBadRequest with default headers values
func NewPostV1MerchantBadRequest() *PostV1MerchantBadRequest {
	return &PostV1MerchantBadRequest{}
}

/*
PostV1MerchantBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type PostV1MerchantBadRequest struct {
	Payload map[string]string
}

// IsSuccess returns true when this post v1 merchant bad request response has a 2xx status code
func (o *PostV1MerchantBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 merchant bad request response has a 3xx status code
func (o *PostV1MerchantBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 merchant bad request response has a 4xx status code
func (o *PostV1MerchantBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 merchant bad request response has a 5xx status code
func (o *PostV1MerchantBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 merchant bad request response a status code equal to that given
func (o *PostV1MerchantBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 merchant bad request response
func (o *PostV1MerchantBadRequest) Code() int {
	return 400
}

func (o *PostV1MerchantBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/merchant][%d] postV1MerchantBadRequest %s", 400, payload)
}

func (o *PostV1MerchantBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/merchant][%d] postV1MerchantBadRequest %s", 400, payload)
}

func (o *PostV1MerchantBadRequest) GetPayload() map[string]string {
	return o.Payload
}

func (o *PostV1MerchantBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1MerchantUnauthorized creates a PostV1MerchantUnauthorized with default headers values
func NewPostV1MerchantUnauthorized() *PostV1MerchantUnauthorized {
	return &PostV1MerchantUnauthorized{}
}

/*
PostV1MerchantUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostV1MerchantUnauthorized struct {
	Payload map[string]string
}

// IsSuccess returns true when this post v1 merchant unauthorized response has a 2xx status code
func (o *PostV1MerchantUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 merchant unauthorized response has a 3xx status code
func (o *PostV1MerchantUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 merchant unauthorized response has a 4xx status code
func (o *PostV1MerchantUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 merchant unauthorized response has a 5xx status code
func (o *PostV1MerchantUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 merchant unauthorized response a status code equal to that given
func (o *PostV1MerchantUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post v1 merchant unauthorized response
func (o *PostV1MerchantUnauthorized) Code() int {
	return 401
}

func (o *PostV1MerchantUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/merchant][%d] postV1MerchantUnauthorized %s", 401, payload)
}

func (o *PostV1MerchantUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/merchant][%d] postV1MerchantUnauthorized %s", 401, payload)
}

func (o *PostV1MerchantUnauthorized) GetPayload() map[string]string {
	return o.Payload
}

func (o *PostV1MerchantUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1MerchantInternalServerError creates a PostV1MerchantInternalServerError with default headers values
func NewPostV1MerchantInternalServerError() *PostV1MerchantInternalServerError {
	return &PostV1MerchantInternalServerError{}
}

/*
PostV1MerchantInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PostV1MerchantInternalServerError struct {
	Payload map[string]string
}

// IsSuccess returns true when this post v1 merchant internal server error response has a 2xx status code
func (o *PostV1MerchantInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 merchant internal server error response has a 3xx status code
func (o *PostV1MerchantInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 merchant internal server error response has a 4xx status code
func (o *PostV1MerchantInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 merchant internal server error response has a 5xx status code
func (o *PostV1MerchantInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 merchant internal server error response a status code equal to that given
func (o *PostV1MerchantInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 merchant internal server error response
func (o *PostV1MerchantInternalServerError) Code() int {
	return 500
}

func (o *PostV1MerchantInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/merchant][%d] postV1MerchantInternalServerError %s", 500, payload)
}

func (o *PostV1MerchantInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/merchant][%d] postV1MerchantInternalServerError %s", 500, payload)
}

func (o *PostV1MerchantInternalServerError) GetPayload() map[string]string {
	return o.Payload
}

func (o *PostV1MerchantInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
