// Code generated by go-swagger; DO NOT EDIT.

package virtual_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new virtual account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new virtual account API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new virtual account API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for virtual account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteVaV10TransferVaDeleteVa(params *DeleteVaV10TransferVaDeleteVaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVaV10TransferVaDeleteVaOK, error)

	PostVaV10TransferVaCreateVa(params *PostVaV10TransferVaCreateVaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaV10TransferVaCreateVaOK, error)

	PostVaV10TransferVaInquiry(params *PostVaV10TransferVaInquiryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaV10TransferVaInquiryOK, error)

	PostVaV10TransferVaStatus(params *PostVaV10TransferVaStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaV10TransferVaStatusOK, error)

	PutVaV10TransferVaUpdateVa(params *PutVaV10TransferVaUpdateVaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutVaV10TransferVaUpdateVaOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteVaV10TransferVaDeleteVa deletes virtual account

Deletes an existing virtual account
*/
func (a *Client) DeleteVaV10TransferVaDeleteVa(params *DeleteVaV10TransferVaDeleteVaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVaV10TransferVaDeleteVaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVaV10TransferVaDeleteVaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVaV10TransferVaDeleteVa",
		Method:             "DELETE",
		PathPattern:        "/va/v1.0/transfer-va/delete-va",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVaV10TransferVaDeleteVaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVaV10TransferVaDeleteVaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVaV10TransferVaDeleteVa: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostVaV10TransferVaCreateVa creates a virtual account

Creates a new virtual account for payment collection
*/
func (a *Client) PostVaV10TransferVaCreateVa(params *PostVaV10TransferVaCreateVaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaV10TransferVaCreateVaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaV10TransferVaCreateVaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostVaV10TransferVaCreateVa",
		Method:             "POST",
		PathPattern:        "/va/v1.0/transfer-va/create-va",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVaV10TransferVaCreateVaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaV10TransferVaCreateVaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostVaV10TransferVaCreateVa: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostVaV10TransferVaInquiry inquiries virtual account

Get details of an existing virtual account
*/
func (a *Client) PostVaV10TransferVaInquiry(params *PostVaV10TransferVaInquiryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaV10TransferVaInquiryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaV10TransferVaInquiryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostVaV10TransferVaInquiry",
		Method:             "POST",
		PathPattern:        "/va/v1.0/transfer-va/inquiry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVaV10TransferVaInquiryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaV10TransferVaInquiryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostVaV10TransferVaInquiry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostVaV10TransferVaStatus checks virtual account payment status

Check the payment status of a virtual account
*/
func (a *Client) PostVaV10TransferVaStatus(params *PostVaV10TransferVaStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostVaV10TransferVaStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostVaV10TransferVaStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostVaV10TransferVaStatus",
		Method:             "POST",
		PathPattern:        "/va/v1.0/transfer-va/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostVaV10TransferVaStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostVaV10TransferVaStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostVaV10TransferVaStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutVaV10TransferVaUpdateVa updates virtual account

Updates an existing virtual account's details
*/
func (a *Client) PutVaV10TransferVaUpdateVa(params *PutVaV10TransferVaUpdateVaParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutVaV10TransferVaUpdateVaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutVaV10TransferVaUpdateVaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutVaV10TransferVaUpdateVa",
		Method:             "PUT",
		PathPattern:        "/va/v1.0/transfer-va/update-va",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutVaV10TransferVaUpdateVaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutVaV10TransferVaUpdateVaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutVaV10TransferVaUpdateVa: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
