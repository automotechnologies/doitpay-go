// Code generated by go-swagger; DO NOT EDIT.

package virtual_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/automotechnologies/doitpay-go/models"
)

// PostV1VirtualAccountReader is a Reader for the PostV1VirtualAccount structure.
type PostV1VirtualAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1VirtualAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV1VirtualAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1VirtualAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostV1VirtualAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1VirtualAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/virtual-account] PostV1VirtualAccount", response, response.Code())
	}
}

// NewPostV1VirtualAccountOK creates a PostV1VirtualAccountOK with default headers values
func NewPostV1VirtualAccountOK() *PostV1VirtualAccountOK {
	return &PostV1VirtualAccountOK{}
}

/*
PostV1VirtualAccountOK describes a response with status code 200, with default header values.

OK
*/
type PostV1VirtualAccountOK struct {
	Payload *models.CreateVirtualAccountResponse
}

// IsSuccess returns true when this post v1 virtual account o k response has a 2xx status code
func (o *PostV1VirtualAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 virtual account o k response has a 3xx status code
func (o *PostV1VirtualAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 virtual account o k response has a 4xx status code
func (o *PostV1VirtualAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 virtual account o k response has a 5xx status code
func (o *PostV1VirtualAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 virtual account o k response a status code equal to that given
func (o *PostV1VirtualAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v1 virtual account o k response
func (o *PostV1VirtualAccountOK) Code() int {
	return 200
}

func (o *PostV1VirtualAccountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/virtual-account][%d] postV1VirtualAccountOK %s", 200, payload)
}

func (o *PostV1VirtualAccountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/virtual-account][%d] postV1VirtualAccountOK %s", 200, payload)
}

func (o *PostV1VirtualAccountOK) GetPayload() *models.CreateVirtualAccountResponse {
	return o.Payload
}

func (o *PostV1VirtualAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateVirtualAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1VirtualAccountBadRequest creates a PostV1VirtualAccountBadRequest with default headers values
func NewPostV1VirtualAccountBadRequest() *PostV1VirtualAccountBadRequest {
	return &PostV1VirtualAccountBadRequest{}
}

/*
PostV1VirtualAccountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1VirtualAccountBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this post v1 virtual account bad request response has a 2xx status code
func (o *PostV1VirtualAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 virtual account bad request response has a 3xx status code
func (o *PostV1VirtualAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 virtual account bad request response has a 4xx status code
func (o *PostV1VirtualAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 virtual account bad request response has a 5xx status code
func (o *PostV1VirtualAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 virtual account bad request response a status code equal to that given
func (o *PostV1VirtualAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 virtual account bad request response
func (o *PostV1VirtualAccountBadRequest) Code() int {
	return 400
}

func (o *PostV1VirtualAccountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/virtual-account][%d] postV1VirtualAccountBadRequest %s", 400, payload)
}

func (o *PostV1VirtualAccountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/virtual-account][%d] postV1VirtualAccountBadRequest %s", 400, payload)
}

func (o *PostV1VirtualAccountBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *PostV1VirtualAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1VirtualAccountUnauthorized creates a PostV1VirtualAccountUnauthorized with default headers values
func NewPostV1VirtualAccountUnauthorized() *PostV1VirtualAccountUnauthorized {
	return &PostV1VirtualAccountUnauthorized{}
}

/*
PostV1VirtualAccountUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostV1VirtualAccountUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this post v1 virtual account unauthorized response has a 2xx status code
func (o *PostV1VirtualAccountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 virtual account unauthorized response has a 3xx status code
func (o *PostV1VirtualAccountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 virtual account unauthorized response has a 4xx status code
func (o *PostV1VirtualAccountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 virtual account unauthorized response has a 5xx status code
func (o *PostV1VirtualAccountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 virtual account unauthorized response a status code equal to that given
func (o *PostV1VirtualAccountUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post v1 virtual account unauthorized response
func (o *PostV1VirtualAccountUnauthorized) Code() int {
	return 401
}

func (o *PostV1VirtualAccountUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/virtual-account][%d] postV1VirtualAccountUnauthorized %s", 401, payload)
}

func (o *PostV1VirtualAccountUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/virtual-account][%d] postV1VirtualAccountUnauthorized %s", 401, payload)
}

func (o *PostV1VirtualAccountUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *PostV1VirtualAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1VirtualAccountInternalServerError creates a PostV1VirtualAccountInternalServerError with default headers values
func NewPostV1VirtualAccountInternalServerError() *PostV1VirtualAccountInternalServerError {
	return &PostV1VirtualAccountInternalServerError{}
}

/*
PostV1VirtualAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1VirtualAccountInternalServerError struct {
	Payload interface{}
}

// IsSuccess returns true when this post v1 virtual account internal server error response has a 2xx status code
func (o *PostV1VirtualAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 virtual account internal server error response has a 3xx status code
func (o *PostV1VirtualAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 virtual account internal server error response has a 4xx status code
func (o *PostV1VirtualAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 virtual account internal server error response has a 5xx status code
func (o *PostV1VirtualAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 virtual account internal server error response a status code equal to that given
func (o *PostV1VirtualAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 virtual account internal server error response
func (o *PostV1VirtualAccountInternalServerError) Code() int {
	return 500
}

func (o *PostV1VirtualAccountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/virtual-account][%d] postV1VirtualAccountInternalServerError %s", 500, payload)
}

func (o *PostV1VirtualAccountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/virtual-account][%d] postV1VirtualAccountInternalServerError %s", 500, payload)
}

func (o *PostV1VirtualAccountInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *PostV1VirtualAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
