// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new authentication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new authentication API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new authentication API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for authentication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostAuthV10AccessTokenB2b(params *PostAuthV10AccessTokenB2bParams, opts ...ClientOption) (*PostAuthV10AccessTokenB2bOK, error)

	PostAuthV10UtilitiesSignatureAuth(params *PostAuthV10UtilitiesSignatureAuthParams, opts ...ClientOption) (*PostAuthV10UtilitiesSignatureAuthOK, error)

	PostAuthV10UtilitiesSignatureService(params *PostAuthV10UtilitiesSignatureServiceParams, opts ...ClientOption) (*PostAuthV10UtilitiesSignatureServiceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PostAuthV10AccessTokenB2b generates b2 b access token

Generates an OAuth2 access token for B2B integration using client credentials
*/
func (a *Client) PostAuthV10AccessTokenB2b(params *PostAuthV10AccessTokenB2bParams, opts ...ClientOption) (*PostAuthV10AccessTokenB2bOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthV10AccessTokenB2bParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAuthV10AccessTokenB2b",
		Method:             "POST",
		PathPattern:        "/auth/v1.0/access-token/b2b",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAuthV10AccessTokenB2bReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAuthV10AccessTokenB2bOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAuthV10AccessTokenB2b: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAuthV10UtilitiesSignatureAuth generates signature for access token request

Generates a signature that can be used for requesting access tokens
*/
func (a *Client) PostAuthV10UtilitiesSignatureAuth(params *PostAuthV10UtilitiesSignatureAuthParams, opts ...ClientOption) (*PostAuthV10UtilitiesSignatureAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthV10UtilitiesSignatureAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAuthV10UtilitiesSignatureAuth",
		Method:             "POST",
		PathPattern:        "/auth/v1.0/utilities/signature-auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAuthV10UtilitiesSignatureAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAuthV10UtilitiesSignatureAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAuthV10UtilitiesSignatureAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAuthV10UtilitiesSignatureService generates signature for service requests

Generates a signature that can be used for service API calls
*/
func (a *Client) PostAuthV10UtilitiesSignatureService(params *PostAuthV10UtilitiesSignatureServiceParams, opts ...ClientOption) (*PostAuthV10UtilitiesSignatureServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthV10UtilitiesSignatureServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAuthV10UtilitiesSignatureService",
		Method:             "POST",
		PathPattern:        "/auth/v1.0/utilities/signature-service",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAuthV10UtilitiesSignatureServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAuthV10UtilitiesSignatureServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAuthV10UtilitiesSignatureService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
