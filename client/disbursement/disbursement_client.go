// Code generated by go-swagger; DO NOT EDIT.

package disbursement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new disbursement API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new disbursement API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new disbursement API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for disbursement API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostDisbursementV10Balance(params *PostDisbursementV10BalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10BalanceOK, error)

	PostDisbursementV10BankAccountValidation(params *PostDisbursementV10BankAccountValidationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10BankAccountValidationOK, error)

	PostDisbursementV10BankDisbursement(params *PostDisbursementV10BankDisbursementParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10BankDisbursementOK, error)

	PostDisbursementV10BankDisbursementStatus(params *PostDisbursementV10BankDisbursementStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10BankDisbursementStatusOK, error)

	PostDisbursementV10EmoneyAccountValidation(params *PostDisbursementV10EmoneyAccountValidationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10EmoneyAccountValidationOK, error)

	PostDisbursementV10EmoneyDisbursement(params *PostDisbursementV10EmoneyDisbursementParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10EmoneyDisbursementOK, error)

	PostDisbursementV10EmoneyDisbursementStatus(params *PostDisbursementV10EmoneyDisbursementStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10EmoneyDisbursementStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PostDisbursementV10Balance checks account balance

Get the available balance for a specified account
*/
func (a *Client) PostDisbursementV10Balance(params *PostDisbursementV10BalanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10BalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDisbursementV10BalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDisbursementV10Balance",
		Method:             "POST",
		PathPattern:        "/disbursement/v1.0/balance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDisbursementV10BalanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDisbursementV10BalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDisbursementV10Balance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDisbursementV10BankAccountValidation validates bank account

Validate bank account details before creating a disbursement
*/
func (a *Client) PostDisbursementV10BankAccountValidation(params *PostDisbursementV10BankAccountValidationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10BankAccountValidationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDisbursementV10BankAccountValidationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDisbursementV10BankAccountValidation",
		Method:             "POST",
		PathPattern:        "/disbursement/v1.0/bank-account-validation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDisbursementV10BankAccountValidationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDisbursementV10BankAccountValidationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDisbursementV10BankAccountValidation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDisbursementV10BankDisbursement creates bank disbursement transaction

Create a new bank disbursement transaction for transferring funds to a bank account
*/
func (a *Client) PostDisbursementV10BankDisbursement(params *PostDisbursementV10BankDisbursementParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10BankDisbursementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDisbursementV10BankDisbursementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDisbursementV10BankDisbursement",
		Method:             "POST",
		PathPattern:        "/disbursement/v1.0/bank-disbursement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDisbursementV10BankDisbursementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDisbursementV10BankDisbursementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDisbursementV10BankDisbursement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDisbursementV10BankDisbursementStatus gets bank disbursement status

Check the status of a bank disbursement transaction
*/
func (a *Client) PostDisbursementV10BankDisbursementStatus(params *PostDisbursementV10BankDisbursementStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10BankDisbursementStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDisbursementV10BankDisbursementStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDisbursementV10BankDisbursementStatus",
		Method:             "POST",
		PathPattern:        "/disbursement/v1.0/bank-disbursement/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDisbursementV10BankDisbursementStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDisbursementV10BankDisbursementStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDisbursementV10BankDisbursementStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDisbursementV10EmoneyAccountValidation validates e money account

Validate e-money account details before creating a disbursement
*/
func (a *Client) PostDisbursementV10EmoneyAccountValidation(params *PostDisbursementV10EmoneyAccountValidationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10EmoneyAccountValidationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDisbursementV10EmoneyAccountValidationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDisbursementV10EmoneyAccountValidation",
		Method:             "POST",
		PathPattern:        "/disbursement/v1.0/emoney-account-validation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDisbursementV10EmoneyAccountValidationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDisbursementV10EmoneyAccountValidationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDisbursementV10EmoneyAccountValidation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDisbursementV10EmoneyDisbursement creates e money disbursement

Create a new e-money disbursement transaction for transferring funds to an e-wallet
*/
func (a *Client) PostDisbursementV10EmoneyDisbursement(params *PostDisbursementV10EmoneyDisbursementParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10EmoneyDisbursementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDisbursementV10EmoneyDisbursementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDisbursementV10EmoneyDisbursement",
		Method:             "POST",
		PathPattern:        "/disbursement/v1.0/emoney-disbursement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDisbursementV10EmoneyDisbursementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDisbursementV10EmoneyDisbursementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDisbursementV10EmoneyDisbursement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDisbursementV10EmoneyDisbursementStatus gets e money disbursement status

Check the status of an e-money disbursement transaction
*/
func (a *Client) PostDisbursementV10EmoneyDisbursementStatus(params *PostDisbursementV10EmoneyDisbursementStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDisbursementV10EmoneyDisbursementStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDisbursementV10EmoneyDisbursementStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDisbursementV10EmoneyDisbursementStatus",
		Method:             "POST",
		PathPattern:        "/disbursement/v1.0/emoney-disbursement/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDisbursementV10EmoneyDisbursementStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDisbursementV10EmoneyDisbursementStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDisbursementV10EmoneyDisbursementStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
