/*
Doitpay API

Testing PublicInvoiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package doitpay

import (
	"context"
	"os"
	"testing"

	"github.com/automotechnologies/doitpay-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_doitpay_InvoiceApiService(t *testing.T) {

	apiKey := os.Getenv("DTP_APIKEY")
	if apiKey == "" {
		t.Skip("DTP_APIKEY not set")
	}

	apiClient := doitpay.NewClient(apiKey)

	t.Run("Test InvoiceApiService CreateInvoice", func(t *testing.T) {

		resp, httpRes, err := apiClient.InvoiceAPI.CreateInvoice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService DownloadInvoice", func(t *testing.T) {

		resp, httpRes, err := apiClient.InvoiceAPI.DownloadInvoice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService ExpireInvoice", func(t *testing.T) {

		var invoiceId string

		resp, httpRes, err := apiClient.InvoiceAPI.ExpireInvoice(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService GetInvoiceById", func(t *testing.T) {

		var invoiceId string

		resp, httpRes, err := apiClient.InvoiceAPI.GetInvoiceById(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService GetInvoices", func(t *testing.T) {

		resp, httpRes, err := apiClient.InvoiceAPI.GetInvoices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService GetPaymentMethodById", func(t *testing.T) {

		var invoiceId string

		resp, httpRes, err := apiClient.InvoiceAPI.GetPaymentMethodById(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoiceApiService UpdateInvoiceById", func(t *testing.T) {

		var invoiceId string

		resp, httpRes, err := apiClient.InvoiceAPI.UpdateInvoiceById(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
