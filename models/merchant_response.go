// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MerchantResponse merchant response
//
// swagger:model MerchantResponse
type MerchantResponse struct {

	// balance
	Balance *MerchantResponseBalance `json:"balance,omitempty"`

	// merchant
	Merchant *MerchantResponseMerchant `json:"merchant,omitempty"`

	// qr nmid
	QrNmid *MerchantResponseQrNmid `json:"qr_nmid,omitempty"`
}

// Validate validates this merchant response
func (m *MerchantResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQrNmid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MerchantResponse) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *MerchantResponse) validateMerchant(formats strfmt.Registry) error {
	if swag.IsZero(m.Merchant) { // not required
		return nil
	}

	if m.Merchant != nil {
		if err := m.Merchant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merchant")
			}
			return err
		}
	}

	return nil
}

func (m *MerchantResponse) validateQrNmid(formats strfmt.Registry) error {
	if swag.IsZero(m.QrNmid) { // not required
		return nil
	}

	if m.QrNmid != nil {
		if err := m.QrNmid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qr_nmid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qr_nmid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this merchant response based on the context it is used
func (m *MerchantResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQrNmid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MerchantResponse) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if m.Balance != nil {

		if swag.IsZero(m.Balance) { // not required
			return nil
		}

		if err := m.Balance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *MerchantResponse) contextValidateMerchant(ctx context.Context, formats strfmt.Registry) error {

	if m.Merchant != nil {

		if swag.IsZero(m.Merchant) { // not required
			return nil
		}

		if err := m.Merchant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchant")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("merchant")
			}
			return err
		}
	}

	return nil
}

func (m *MerchantResponse) contextValidateQrNmid(ctx context.Context, formats strfmt.Registry) error {

	if m.QrNmid != nil {

		if swag.IsZero(m.QrNmid) { // not required
			return nil
		}

		if err := m.QrNmid.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qr_nmid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("qr_nmid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MerchantResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MerchantResponse) UnmarshalBinary(b []byte) error {
	var res MerchantResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MerchantResponseBalance Balance information
//
// swagger:model MerchantResponseBalance
type MerchantResponseBalance struct {

	// Current balance amount
	Balance float64 `json:"balance,omitempty"`

	// Merchant reference ID
	MerchantRef string `json:"merchant_ref,omitempty"`
}

// Validate validates this merchant response balance
func (m *MerchantResponseBalance) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this merchant response balance based on context it is used
func (m *MerchantResponseBalance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MerchantResponseBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MerchantResponseBalance) UnmarshalBinary(b []byte) error {
	var res MerchantResponseBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MerchantResponseMerchant Merchant information
//
// swagger:model MerchantResponseMerchant
type MerchantResponseMerchant struct {

	// Name of the business
	BusinessName string `json:"business_name,omitempty"`

	// Unique reference ID for the merchant
	MerchantRef string `json:"merchant_ref,omitempty"`

	// Name of the merchant
	Name string `json:"name,omitempty"`
}

// Validate validates this merchant response merchant
func (m *MerchantResponseMerchant) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this merchant response merchant based on context it is used
func (m *MerchantResponseMerchant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MerchantResponseMerchant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MerchantResponseMerchant) UnmarshalBinary(b []byte) error {
	var res MerchantResponseMerchant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MerchantResponseQrNmid QR NMID information
//
// swagger:model MerchantResponseQrNmid
type MerchantResponseQrNmid struct {

	// Whether the QR NMID is active
	IsActive bool `json:"IsActive,omitempty"`

	// Issuer information
	Issuer string `json:"Issuer,omitempty"`

	// Merchant PAN number
	MerchantPAN string `json:"MerchantPAN,omitempty"`

	// Store ID
	StoreID string `json:"StoreId,omitempty"`

	// Sub-merchant ID
	SubMerchantID string `json:"SubMerchantId,omitempty"`
}

// Validate validates this merchant response qr nmid
func (m *MerchantResponseQrNmid) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this merchant response qr nmid based on context it is used
func (m *MerchantResponseQrNmid) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MerchantResponseQrNmid) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MerchantResponseQrNmid) UnmarshalBinary(b []byte) error {
	var res MerchantResponseQrNmid
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
