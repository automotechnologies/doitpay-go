// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Apiv1CheckPaymentStatusVirtualAccountData apiv1 check payment status virtual account data
//
// swagger:model apiv1.CheckPaymentStatusVirtualAccountData
type Apiv1CheckPaymentStatusVirtualAccountData struct {

	// customer no
	CustomerNo string `json:"customerNo,omitempty"`

	// expired date
	ExpiredDate string `json:"expiredDate,omitempty"`

	// inquiry request Id
	InquiryRequestID string `json:"inquiryRequestId,omitempty"`

	// paid amount
	PaidAmount *Apiv1AmountDetail `json:"paidAmount,omitempty"`

	// partner service Id
	PartnerServiceID string `json:"partnerServiceId,omitempty"`

	// payment flag reason
	PaymentFlagReason *Apiv1PaymentFlagReason `json:"paymentFlagReason,omitempty"`

	// payment flag status
	PaymentFlagStatus string `json:"paymentFlagStatus,omitempty"`

	// payment request Id
	PaymentRequestID string `json:"paymentRequestId,omitempty"`

	// total amount
	TotalAmount *Apiv1AmountDetail `json:"totalAmount,omitempty"`

	// trx date time
	TrxDateTime string `json:"trxDateTime,omitempty"`

	// virtual account name
	VirtualAccountName string `json:"virtualAccountName,omitempty"`

	// virtual account no
	VirtualAccountNo string `json:"virtualAccountNo,omitempty"`

	// virtual account trx type
	VirtualAccountTrxType string `json:"virtualAccountTrxType,omitempty"`
}

// Validate validates this apiv1 check payment status virtual account data
func (m *Apiv1CheckPaymentStatusVirtualAccountData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaidAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentFlagReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Apiv1CheckPaymentStatusVirtualAccountData) validatePaidAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.PaidAmount) { // not required
		return nil
	}

	if m.PaidAmount != nil {
		if err := m.PaidAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paidAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paidAmount")
			}
			return err
		}
	}

	return nil
}

func (m *Apiv1CheckPaymentStatusVirtualAccountData) validatePaymentFlagReason(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentFlagReason) { // not required
		return nil
	}

	if m.PaymentFlagReason != nil {
		if err := m.PaymentFlagReason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentFlagReason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentFlagReason")
			}
			return err
		}
	}

	return nil
}

func (m *Apiv1CheckPaymentStatusVirtualAccountData) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalAmount) { // not required
		return nil
	}

	if m.TotalAmount != nil {
		if err := m.TotalAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this apiv1 check payment status virtual account data based on the context it is used
func (m *Apiv1CheckPaymentStatusVirtualAccountData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaidAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentFlagReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Apiv1CheckPaymentStatusVirtualAccountData) contextValidatePaidAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.PaidAmount != nil {

		if swag.IsZero(m.PaidAmount) { // not required
			return nil
		}

		if err := m.PaidAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paidAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paidAmount")
			}
			return err
		}
	}

	return nil
}

func (m *Apiv1CheckPaymentStatusVirtualAccountData) contextValidatePaymentFlagReason(ctx context.Context, formats strfmt.Registry) error {

	if m.PaymentFlagReason != nil {

		if swag.IsZero(m.PaymentFlagReason) { // not required
			return nil
		}

		if err := m.PaymentFlagReason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentFlagReason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentFlagReason")
			}
			return err
		}
	}

	return nil
}

func (m *Apiv1CheckPaymentStatusVirtualAccountData) contextValidateTotalAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalAmount != nil {

		if swag.IsZero(m.TotalAmount) { // not required
			return nil
		}

		if err := m.TotalAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Apiv1CheckPaymentStatusVirtualAccountData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Apiv1CheckPaymentStatusVirtualAccountData) UnmarshalBinary(b []byte) error {
	var res Apiv1CheckPaymentStatusVirtualAccountData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
